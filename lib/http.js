// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var decode, decode_json_obj, encode, mime_types, _ref;

  _ref = require('./encode'), decode = _ref.decode, decode_json_obj = _ref.decode_json_obj, encode = _ref.encode;

  mime_types = require('./mime').mime_types;

  exports.to_content_type_and_body = function(_arg) {
    var body, ct, encoding, err, obj;
    encoding = _arg.encoding, obj = _arg.obj;
    err = ct = body = null;
    encoding || (encoding = 'json');
    body = (function() {
      switch (encoding) {
        case 'json':
          return encode({
            obj: obj,
            json: true
          });
        case 'msgpack':
          return encode({
            obj: obj,
            msgpack: true,
            encoding: 'binary'
          });
        case 'msgpack64':
          return encode({
            obj: obj,
            msgpack: true,
            encoding: 'base64'
          });
        default:
          return null;
      }
    })();
    if (body != null) {
      ct = mime_types[encoding];
    } else {
      err = new Error("unknown encoding: " + encoding);
    }
    return [err, ct, body];
  };

  exports.from_content_type_and_body = function(_arg) {
    var body, content_type, e, err, nb;
    content_type = _arg.content_type, body = _arg.body;
    nb = err = null;
    try {
      nb = (function() {
        switch (content_type) {
          case mime_types.json:
            return decode_json_obj(body);
          case mime_types.msgpack:
            return decode({
              buf: body,
              msgpack: true
            });
          case mime_types.msgpack64:
            return decode({
              buf: body,
              msgpack: true,
              encoding: 'base64'
            });
          default:
            return null;
        }
      })();
    } catch (_error) {
      e = _error;
      err = new Error("Error decoding output: " + e.message);
    }
    return [err, nb || body];
  };

}).call(this);
