// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var encode, encode_json, encode_json_obj, encode_msgpack, purepack;

  purepack = require('purepack');

  exports.encode = encode = function(_arg) {
    var encoding, json, msgpack, obj;
    obj = _arg.obj, json = _arg.json, msgpack = _arg.msgpack, encoding = _arg.encoding;
    if (json) {
      json = true;
    } else if (msgpack) {
      json = false;
    } else {
      json = true;
    }
    if (json) {
      return encode_json(obj);
    } else {
      return encode_msgpack({
        obj: obj,
        encoding: encoding
      });
    }
  };

  encode_json = function(obj) {
    var o2;
    o2 = encode_json_obj(obj);
    return JSON.stringify(o2);
  };

  encode_msgpack = function(_arg) {
    var encoding, o2, obj;
    obj = _arg.obj, encoding = _arg.encoding;
    o2 = purepack.pack(obj);
    if (encoding != null) {
      return o2.toString(encoding);
    } else {
      return o2;
    }
  };

  exports.encode_json_obj = encode_json_obj = function(o) {
    var _encode_json_obj, _is_hex_key;
    _is_hex_key = function(key) {
      return key != null ? key.match(/(^|_)(fingerprint|u?id)s?$/) : void 0;
    };
    _encode_json_obj = function(o, last_key) {
      var e, k, out, v, _i, _len, _results;
      if (typeof o !== 'object') {
        return o;
      } else if (Array.isArray(o)) {
        _results = [];
        for (_i = 0, _len = o.length; _i < _len; _i++) {
          e = o[_i];
          _results.push(_encode_json_obj(e, last_key));
        }
        return _results;
      } else if (Buffer.isBuffer(o)) {
        if (_is_hex_key(last_key)) {
          return {
            __h: o.toString('hex')
          };
        } else {
          return {
            __b: o.toString('base64')
          };
        }
      } else {
        out = {};
        for (k in o) {
          v = o[k];
          out[k] = _encode_json_obj(v, k);
        }
        return out;
      }
    };
    return _encode_json_obj(o, null);
  };

}).call(this);
