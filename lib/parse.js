// Generated by IcedCoffeeScript 1.7.1-b
(function() {
  var lookup, parse_key;

  exports.parse_key = parse_key = function(key) {
    var err, index, indices, item, k, m, out, tmp, _i, _j, _len, _len1;
    err = null;
    out = [];
    tmp = (function() {
      var _i, _len, _ref, _results;
      _ref = key.split(/\./);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        k = _ref[_i];
        _results.push({
          type: 'dict',
          key: k
        });
      }
      return _results;
    })();
    for (_i = 0, _len = tmp.length; _i < _len; _i++) {
      item = tmp[_i];
      if (!(m = item.key.match(/^([^[]*)((?:\[.+?\])+)(.*)$/))) {
        out.push(item);
      } else if (m[3].length) {
        err = new Error("found junk in key: " + m[3]);
      } else {
        if ((m[1] != null) && m[1].length) {
          item.key = m[1];
          out.push(item);
        }
        indices = m[2].slice(1, -1).split(/\]\[/);
        for (_j = 0, _len1 = indices.length; _j < _len1; _j++) {
          index = indices[_j];
          if (index.match(/^\d+$/)) {
            out.push({
              type: 'array',
              key: parseInt(index, 10)
            });
          } else {
            err = new Error("bad array index: " + index);
            break;
          }
        }
      }
      if (err != null) {
        break;
      }
    }
    if (err != null) {
      out = null;
    }
    return [err, out];
  };

  exports.lookup = lookup = function(_arg) {
    var err, front, i, key, obj, path, _ref;
    obj = _arg.obj, key = _arg.key;
    _ref = parse_key(key), err = _ref[0], path = _ref[1];
    i = 0;
    while ((obj != null) && (err == null) && i < path.length) {
      front = path[i++];
      obj = typeof obj !== 'object' ? null : Array.isArray(obj) ? front.type === 'array' ? obj[front.key] : null : front.type === 'dict' ? obj[front.key] : null;
    }
    return obj;
  };

}).call(this);
